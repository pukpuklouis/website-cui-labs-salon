---
import type { CollectionEntry } from 'astro:content';
import { Image } from 'astro:assets';

interface Props {
  service: CollectionEntry<'services'>['data'][number];
  className?: string;
}

const { 
  service, 
  // if is empty string, set to default class
  className = "rounded-t-full rounded-e-full"
} = Astro.props;
---

<article class="overflow-hidden opacity-0 flex flex-col md:flex-col items-center justify-start gap-4 p-4 md:p-6 lg:p-8">
  <div class={`relative w-[100%] md:w-[335px] lg:w-[360px] h-full aspect-[9/16] overflow-hidden z-0 ${className}`}>
    <Image src={service.image.src} alt={service.image.alt} width={300} height={800} class="w-full h-full hover:scale-105 transition-all duration-500 ease-in-out object-cover" />
  </div>
  {service.name && <div class="relative translate-x-1/12 md:translate-x-1/16 lg:translate-x-1/12 font-sans text-right bg-gradient-to-l from-gray-700/0 via-gray-700/60 to-gray-700/00 p-4 w-3/4 md:w-full lg:w-3/4 -mt-56 z-10">
    <h3 class="text-4xl md:text-4xl lg:text-4xl font-semibold mb-2 text-gray-50 service-element">{service.name}</h3>
    <p class="text-sm md:text-base text-balance lg:text-base text-gray-200 mb-2 service-element">{service.description}</p>
  </div>}
</article>

<script>
  import { animate, inView, stagger, easeIn, easeOut, easeInOut } from "motion";

  document.addEventListener("DOMContentLoaded", () => {
    const articles = document.querySelectorAll("article");
    
    // Apply staggered delay to the article elements themselves
    articles.forEach((article, index) => {
      // Animate the article container with staggered delay based on index
      inView(article, (element) => {
        // Entry animation
        animate(
          element,
          {
            opacity: [0, 1],
            y: [20, 0],
            rotate: [-2, 0],
          },
          {
            type: "spring",
            duration: 0.8,
            delay: index * 0.2, // Fixed delay based on article index
            bounce: 0.3
          }
        );
        
        // Animate the individual service elements with staggered offset
        const serviceElements = element.querySelectorAll(".service-element");
        
        // Convert NodeList to Array to use forEach with index
        Array.from(serviceElements).forEach((el, i) => {
          animate(
            el,
            {
              opacity: [0, 1],
              x: [100, 0], // Slide in from right
            },
            {
              type: "spring",
              delay: i * 0.1 + (index * 0.2), // Element index delay + article index delay
              duration: 0.6,
              bounce: 0.3
            }
          );
        });
        
        // Return function for exit animation
        return () => {
          // Exit animation for the container
          animate(
            element,
            {
              opacity: [1, 0],
            },
            {
              duration: 0.3,
            }
          );
          
          // Exit animation for the service elements
          const exitElements = element.querySelectorAll(".service-element");
          Array.from(exitElements).forEach((el, i) => {
            animate(
              el,
              {
                opacity: [1, 0],
                x: [0, 100], // Slide back to right
              },
              {
                delay: i * 0.05 + (index * 0.02), // Element index delay + article index delay
                duration: 0.2,
                ease: "easeInOut"
              }
            );
          });
        };
      }, { amount: 0.2, margin: "300px 0px 100px 0px" }); // Offset parameter for inView
    });
  });
</script>