---
import { getNavLinks } from '../lib/navlink';
import type { NavLink } from '../lib/navlink';
import { Image } from 'astro:assets';
// Get navigation links asynchronously
const navLinks = await getNavLinks(Astro.url.pathname);
---

<header class="fixed top-0 left-0 w-screen z-50">
  <div id="nav-spacer" class="fixed top-0 left-0 w-full h-[192px]"></div>
  <nav id="main-nav" class="bg-gray-100/90 text-gray-500 backdrop-blur-md duration-300 ease-in-out">
    <div id="nav-container" class=" mx-auto flex flex-col items-center py-6">
      <!-- Nav Background Element -->
      <div class="absolute top-0 left-0 w-full h-full z-0">
        <Image src="/nav-bg-element.svg" alt="Nav Background Element" width="80" height="80" class="w-full h-[90%] object-contain opacity-20 filter blur-[1px]" id="main-nav-bg" />
      </div>
      <!-- Logo/Brand Name -->
      <div class="text-xl font-bold mb-8 transition-all duration-300">
        <a href="/" class="cursor-pointer">
          <Image src="/logo/Cui-logo-grey.svg" alt="Logo" width="80" height="80" class="inline-block transition-all duration-300 " id="nav-logo" />
        </a>
      </div>

      <!-- Desktop Navigation Links -->
      <div id="desktop-links" class="hidden md:flex space-x-16 text-md uppercase tracking-wider font-medium transition-opacity duration-300 ease-out opacity-100">
        {navLinks
          .filter((link: NavLink) => link.visibility === 'all' || link.visibility === 'desktop')
          .map((link: NavLink) => (
            <a
              href={link.href}
              class={`hover:font-bold hover:text-gray-800 transition-all duration-300 ease-out relative pb-2 ${
                link.isActive ? 'font-semibold' : ''
              } ${
                link.href === '/booking' || link.href === 'https://line.me/R/ti/p/@572kuqqj' ? 'text-gray-700 hover:text-gray-800' : ''
              }`}
            >
              {link.text}
              {link.isActive && <div class="absolute bottom-0 left-0 w-full h-0.5 bg-gray-800"></div>}
            </a>
          ))}
      </div>

      <!-- Mobile Menu Button -->
      <div class="md:hidden absolute right-4 top-7">
        <button id="mobile-menu-button" class="text-gray-950 focus:outline-none" aria-label="Toggle menu" aria-expanded="false" aria-controls="mobile-menu">
          <!-- Hamburger Icon -->
          <svg id="menu-icon-open" class="w-6 h-6 block" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7"></path>
          </svg>
          <!-- Close Icon (Initially Hidden) -->
          <svg id="menu-icon-close" class="w-6 h-6 hidden" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Menu -->
    <div id="mobile-menu" class="md:hidden overflow-hidden text-left bg-white border-t border-gray-200 relative" hidden>
      <!-- Mobile Nav Background Element -->
      <div class="absolute top-0 left-0 w-full h-full z-0 pointer-events-none">
        <Image src="/nav-bg-element.svg" alt="Nav Background Element" width="80" height="80" class="w-full h-[50%] object-contain opacity-30 filter blur-[1px]" />
      </div>
      <div class="container mx-auto px-4 py-3 space-y-2 relative z-10">
        {navLinks
          .filter((link: NavLink) => link.visibility === 'all' || link.visibility === 'mobile')
          .map((link: NavLink) => (
            <a
              href={link.href}
              target={link.href === '/booking' || link.href === 'https://line.me/R/ti/p/@572kuqqj' ? '_blank' : undefined}
              rel={link.href === '/booking' || link.href === 'https://line.me/R/ti/p/@572kuqqj' ? 'noopener noreferrer' : undefined}
              class={`block py-2 px-8 uppercase text-sm tracking-wide hover:bg-gray-100 hover:rounded-md ${
                link.isActive ? 'font-semibold' : ''
              } ${
                link.href === '/booking' || link.href === 'https://line.me/R/ti/p/@572kuqqj' ? 'text-pink-500' : ''
              }`}
            >
              {link.text}
            </a>
          ))}
      </div>
    </div>
  </nav>
</header>

<!-- Spacer to prevent content from being hidden under the fixed nav -->
<div id="nav-spacer" class="w-full"></div>

<!-- Load animations from external module -->
<script is:inline>
  // Add a class to the body when the mobile menu is open to hide the main nav background
  const mobileMenuButton = document.getElementById('mobile-menu-button');
  const mainNavBg = document.getElementById('main-nav-bg');

  if (mobileMenuButton && mainNavBg) {
    mobileMenuButton.addEventListener('click', () => {
      const isExpanded = mobileMenuButton.getAttribute('aria-expanded') === 'true';
      // The state is toggled after the click, so we check the opposite
      if (!isExpanded) {
        mainNavBg.classList.add('hidden');
      } else {
        mainNavBg.classList.remove('hidden');
      }
    });
  }
</script>

<script src="../scripts/nav-animations.ts"></script>

<style>
  /* Removed max-height transition, handled by Motion */
  #mobile-menu {
    /* height and opacity are animated by Motion */
    overflow: hidden; /* Keep hidden initially and after closing */
  }

  /* Smooth transitions for nav elements */
  #nav-logo {
    transition: width 0.3s ease-out, height 0.3s ease-out;
  }

  #desktop-links {
    transition: opacity 0.3s ease-out;
  }

  /* Ensure smooth transitions for nav container padding */
  #nav-container {
    transition: padding 0.3s ease-out;
  }

  /* Smooth transition for nav shadow */
  #main-nav {
    transition: box-shadow 0.3s ease-out;
  }

  /* Compact nav styles */
  #main-nav.nav-compact {
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
    background: transparent;
  }
</style>

<script>
  // Set initial nav spacer height to match the navigation height
  document.addEventListener('DOMContentLoaded', () => {
    const updateNavSpacer = () => {
      const navHeight = document.getElementById('main-nav')?.offsetHeight || 0;
      const navSpacer = document.getElementById('nav-spacer');
      if (navSpacer) {
        navSpacer.style.height = `${navHeight}px`;
      }
    };
    
    // Update spacer height initially
    updateNavSpacer();
    
    // Update spacer height when window is resized
    window.addEventListener('resize', updateNavSpacer);
    
    // Create a MutationObserver to watch for changes to the nav height
    const navElement = document.getElementById('main-nav');
    if (navElement) {
      const observer = new MutationObserver(updateNavSpacer);
      observer.observe(navElement, { 
        attributes: true, 
        attributeFilter: ['class', 'style'],
        subtree: true 
      });
    }
  });
</script>
