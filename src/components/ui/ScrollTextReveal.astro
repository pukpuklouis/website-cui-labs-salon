---
export interface Props {
  message: string;
  className?: string;
  fontStyle?: "font-sans" | "font-serif" | "font-soligant";
  fontSize?: string;
  animationType?: "spring" | "tween" | "keyframes";
  animationDelay?: number;
  animationDuration?: number;
  animationBounce?: number;
}

const {
  message,
  className,
  fontSize,
  fontStyle,
  animationType = "spring",
  animationDelay = 0.1,
  animationDuration = 2.3,
  animationBounce = 0.0
} = Astro.props;
const uniqueId = `scroll-text-reveal-${crypto.randomUUID()}`;

// 將訊息拆分成單詞
const words = message.split(" ");
---

<div
  class={`relative h-full overflow-hidden ${className} ${fontStyle}`}
  id={uniqueId}
  data-unique-id={uniqueId}
  data-animation-type={animationType}
  data-animation-delay={animationDelay}
  data-animation-duration={animationDuration}
  data-animation-bounce={animationBounce}
>
  <div class="flex w-[100%] h-auto items-center justify-center">
    <p class={`uppercase ${fontSize} text-gray-800 tracking-relaxed`}>
      {words.map((word, i) => (
        <span
          class="inline-block"
          data-word-index={i}
          style={`margin-right: ${i < words.length - 1 ? '0.2em' : '0'};`}
        >
          {word}
        </span>
      ))}
    </p>
  </div>
  {/* 空白空間已被移除 */}
</div>

<script>
  import { scroll, animate, stagger } from "motion";

  // 確保在 DOM 載入後執行
  document.addEventListener('DOMContentLoaded', () => {
    // Select all reveal components on the page
    const revealContainers = document.querySelectorAll('[data-unique-id^="scroll-text-reveal-"]');

    revealContainers.forEach(container => {
      const wordSpans = container.querySelectorAll("span[data-word-index]");

      // 檢查元素是否存在
      if (!wordSpans || wordSpans.length === 0) {
        console.error("Word spans not found in container:", container.id);
        return; // 如果找不到元素，則停止處理此 container
      }

      // Get animation settings from data attributes
      const animationType = container.getAttribute('data-animation-type') || 'spring';
      const animationDelay = parseFloat(container.getAttribute('data-animation-delay') || '0.1');
      const animationDuration = parseFloat(container.getAttribute('data-animation-duration') || '2.3');
      const animationBounce = parseFloat(container.getAttribute('data-animation-bounce') || '0.0');

      // 創建動畫
      const animation = animate(
        Array.from(wordSpans),
        {
          opacity: [0.1, 1],
        },
        {
          type: animationType as any,
          delay: stagger(animationDelay),
          duration: animationDuration,
          bounce: animationBounce,
        }
      );

      // 將動畫連結到捲動進度
      // 動畫進度會與 container 元素的捲動進度同步
      // 當元素進入視窗時動畫向前播放，捲動回溯時動畫會反向播放
      scroll(animation, {
        target: container as HTMLElement, // Cast to HTMLElement
        offset: ["start 0.6", "end 0.5"]
      });
    });
  });
</script>
