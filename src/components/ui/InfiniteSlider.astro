---
// src/components/InfiniteSlider.astro
import { twMerge } from 'tailwind-merge';

interface Props {
  gap?: number;
  speed?: number;
  direction?: 'normal' | 'reverse';
  class?: string;
  duplicateCount?: number;
  mask?: boolean;
}

const { 
  gap = 24, 
  speed = 5, 
  direction = 'normal', 
  class: className,
  duplicateCount = 4,
  mask = true
} = Astro.props;
---

<div
  id="slider-01"
  class={twMerge("w-auto overflow-hidden", mask ? "mask-gradient" : "-ml-16 min-w-full", className)}
  style={`--gap: ${gap}px; --speed: ${speed}s; --direction: ${direction === 'reverse' ? '-1' : '1'};`}
  data-duplicate-count={duplicateCount}
>
  <div class="flex" style={`gap: var(--gap);`}> 
    <div id="content-01" class="flex flex-shrink-0" style={`gap: var(--gap);`}>
      <slot />
    </div>
  </div>
</div>

<style>
  .mask-gradient {
    mask-image: linear-gradient(
      to right,
      transparent 0%,
      black 10%,
      black 90%,
      transparent 100%
    );
    -webkit-mask-image: linear-gradient(
      to right,
      transparent 0%,
      black 10%,
      black 90%,
      transparent 100%
    );
  }
</style>

<script>
  import { animate } from "motion";
  
  document.addEventListener("DOMContentLoaded", () => {
    const element = document.getElementById("content-01");
    const sliderElement = document.getElementById("slider-01");
    
    if (element && sliderElement) {
      // Get the duplicate count from data attribute
      const duplicateCount = parseInt(sliderElement.getAttribute("data-duplicate-count") || "4", 10);
      
      // Clone content multiple times for a more robust infinite effect
      const originalContent = element.innerHTML;
      // Clone the content based on user-defined duplicateCount
      element.innerHTML = originalContent.repeat(duplicateCount);
      
      // Wait for the DOM to update with cloned content
      setTimeout(() => {
        // Get the width of a single set of items
        const itemsWidth = element.scrollWidth / duplicateCount;
        
        // Use the dynamic speed from CSS variables
        const speedVar = getComputedStyle(sliderElement).getPropertyValue('--speed');
        const speed = parseFloat(speedVar) || 5;
        
        // Ensure the slider container is wide enough
        element.style.width = `${itemsWidth * duplicateCount}px`;
        
        animate(
          element,
          { x: ["0px", `-${itemsWidth}px`] },
          { 
            duration: speed, 
            repeat: Infinity, 
            repeatType: "loop",
            ease: "linear" 
          }
        );
      }, 100);
    }
  });
</script>
