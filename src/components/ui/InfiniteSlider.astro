---
// src/components/InfiniteSlider.astro
import { twMerge } from 'tailwind-merge';

interface Props {
  gap?: number;
  speed?: number;
  direction?: 'normal' | 'reverse';
  class?: string;
  duplicateCount?: number;
  mask?: boolean;
  id?: string;
  uniqueId?: string;
}

const { 
  gap = 24, 
  speed = 5, 
  direction = 'normal', 
  class: className,
  duplicateCount = 4,
  mask = true,
  id,
  uniqueId = crypto.randomUUID().substring(0, 8)
} = Astro.props;
---

<div
  id={`slider-${uniqueId}`}
  class={twMerge("w-auto overflow-hidden", mask ? "mask-gradient" : "-ml-16 min-w-full", className)}
  style={`--gap: ${gap}px; --speed: ${speed}s; --direction: ${direction === 'reverse' ? '-1' : '1'};`}
  data-duplicate-count={duplicateCount}
>
  <div class="flex" style={`gap: var(--gap);`}> 
    <div id={`content-${uniqueId}`} class="flex shrink-0" style={`gap: var(--gap);`}>
      <slot />
    </div>
  </div>
</div>

<style>
  .mask-gradient {
    mask-image: linear-gradient(
      to right,
      transparent 0%,
      black 10%,
      black 90%,
      transparent 100%
    );
    -webkit-mask-image: linear-gradient(
      to right,
      transparent 0%,
      black 10%,
      black 90%,
      transparent 100%
    );
  }
</style>

<script>
  import { animate } from "motion";
  
  document.addEventListener("DOMContentLoaded", () => {
    // Get all slider elements on the page
    const sliderElements = document.querySelectorAll("[id^='slider-']");
    
    // Process each slider independently
    sliderElements.forEach(sliderElement => {
      const sliderId = sliderElement.id;
      const contentId = sliderId.replace('slider-', 'content-');
      const element = document.getElementById(contentId);
    
      if (element && sliderElement) {
        // Get the duplicate count from data attribute
        const duplicateCount = parseInt(sliderElement.getAttribute("data-duplicate-count") || "4", 10);
        
        // Clone content multiple times for a more robust infinite effect
        const originalContent = element.innerHTML;
        // Clone the content based on user-defined duplicateCount
        element.innerHTML = originalContent.repeat(duplicateCount);
        
        // Wait for the DOM to update with cloned content
        setTimeout(() => {
          // Get the width of a single set of items
          const itemsWidth = element.scrollWidth / duplicateCount;
          
          // Use the dynamic speed from CSS variables
          const speedVar = getComputedStyle(sliderElement).getPropertyValue('--speed');
          const speed = parseFloat(speedVar) || 5;
          
          // Ensure the slider container is wide enough
          element.style.width = `${itemsWidth * duplicateCount}px`;
          
          animate(
            element,
            { x: ["0px", `-${itemsWidth}px`] },
            { 
              duration: speed, 
              repeat: Infinity, 
              repeatType: "loop",
              ease: "linear" 
            }
          );
        }, 100);
      }
    });
  });
</script>
