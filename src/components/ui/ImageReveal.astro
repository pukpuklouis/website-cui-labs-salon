---
// Import the portfolio collection
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';

// Define the type for portfolio items
interface PortfolioItem {
  src: string;
  angle: string;
  alt?: string;
  title?: string;
  category?: string;
}

// Get the portfolio images from the content collection
const portfolioEntries = await getCollection('portfolio');
// Access the first entry's data, which should be the array of portfolio items, filtered if hide is true
const cards: PortfolioItem[] = portfolioEntries.length > 0 ? portfolioEntries[0].data.filter((item) => !item.hide) : [];

interface Props {
  title?: string;
  description?: string;
  class?: string;
  spacing?: string;
  delay?: number;
}

const { 
  title = "Image Gallery", 
  class: className,
  description = "Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis.",
  spacing = "-ml-24 md:-ml-30", 
  delay = 200 
} = Astro.props;
---

<div class:list={["w-full py-24 overflow-hidden", className]} id="image-reveal">
  <div class="max-w-5xl mx-auto">
    <div class="flex flex-row justify-between items-center mb-12">
      {title && <h2 class="text-2xl font-bold mb-6">{ title }</h2>}
      {description && <p class="font-soligant text-right uppercase text-xs md:text-2xl tracking-tight md:tracking-wider text-gray-500 mb-6">{description}</p>}
    </div>
  </div>
  <div class:list={["relative my-10 ml-10 flex flex-row justify-center md:ml-50"]}>
    {cards.map((card, i) => (
      <div id={`image-${i}`} class={`relative group size-36 md:size-64 ${spacing}`}>
        <Image
          class="relative rounded-2xl border-1 aspect-[3/4] border-gray-100/50 object-cover shadow-xl"
          src={card.src}
          alt={card.alt || "Gallery image"}
          width={300}
          height={300}
          data-index={i}
          data-angle={card.angle}
          data-delay={delay}
          style={`opacity: 0; transform: scale(0.2); rotate: ${card.angle};`}
        />
      </div>
      ))}
  </div>
</div>

<script>
  import { animate, inView } from "motion";

  // Wait for the DOM to be fully loaded
  document.addEventListener("DOMContentLoaded", () => {
    // Apply inView to each image wrapper individually
    const imageWrappers = document.querySelectorAll('.relative.group');
    
    // Set up hover effects for all images
    const setupHoverEffects = (imgElement: HTMLImageElement): void => {
      imgElement.addEventListener('mouseenter', () => {
        animate(
          imgElement,
          { 
            scale: 1.5,
            rotate: "0deg",
            zIndex: 10
          },
          { 
            type: "spring",
            duration: 0.2,
            bounce: 0.3
          }
        );
      });
      
      imgElement.addEventListener('mouseleave', () => {
        const angle = imgElement.getAttribute('data-angle') || "0deg";
        animate(
          imgElement,
          { 
            scale: 0.8,
            rotate: angle,
            zIndex: 0
          },
          { 
            type: "spring",
            duration: 0.4,
            bounce: 0.3
          }
        );
      });
    };

    // Apply inView to each image wrapper
    imageWrappers.forEach((wrapper, index) => {
      // Get the image inside this wrapper
      const imgElement = wrapper.querySelector('img');
      
      if (imgElement) {
        // Set up hover effects
        setupHoverEffects(imgElement as HTMLImageElement);
        
        // Apply inView to this specific wrapper
        inView(wrapper, (element, entry) => {
          // Calculate staggered delay based on index
          const staggerDelay = index * 0.1;
          
          // Get the rotation angle from the data attribute
          const angle = imgElement.getAttribute('data-angle') || "0deg";
          
          // Animate the image when it enters the viewport
          animate(
            imgElement,
            {
              opacity: [0, 1],
              scale: 0.8,
              rotate: angle
            },
            {
              delay: staggerDelay,
              duration: 0.8
            }
          );
          
          // Return a function that handles when the element leaves the viewport
          return (leaveEntry) => {
            // Reverse animation when element leaves viewport
            // animate(
            //   imgElement,
            //   {
            //     opacity: 0,
            //     scale: 0.2,
            //     rotate: angle
            //   },
            //   {
            //     duration: 0.5
            //   }
            // );
          };
        }, {
          // Only trigger when the element is at least 50% visible
          amount: 0.5,
          // Add a margin to trigger the animation slightly before the element is in view
          margin: "0px 0px -200px 0px"
        });
      }
    });
  });
</script>
