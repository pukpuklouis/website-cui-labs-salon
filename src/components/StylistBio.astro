---
// src/components/StylistBio.astro
// Redesigned component with fashion magazine style layout and interactive animations
import { Image } from 'astro:assets';
import type { CollectionEntry } from 'astro:content';
import { getEntry } from 'astro:content';
import BlurryBlob from './ui/backgroud/blurry-blob';

// Define component props using the imported Stylist interface
interface Props {
  stylist: CollectionEntry<'stylistbio'>['data'][number];
}

// Destructure the stylist object from Astro.props
const { stylist } = Astro.props;

// Helper function to capitalize the first letter (for social media keys)
const capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1);

// Generate a unique ID for this stylist card
const cardId = `stylist-card-${stylist.name.toLowerCase().replace(/\s+/g, '-')}`;

// Define interface for social platform icons
interface SocialIconData {
  name: string;
  path: string;
}

interface SocialIconsCollection {
  [key: string]: SocialIconData;
}

// Get social platform icons
let socialIconsData: SocialIconsCollection = {};
try {
  const socialIcons = await getEntry('SocialPlatformIcons', 'SocialPlatformIcons');
  if (socialIcons && socialIcons.data) {
    socialIconsData = socialIcons.data as SocialIconsCollection;
  }
} catch (error) {
  console.error('Error loading social icons:', error);
}
---

<div id={cardId} class="stylist-card relative opacity-[0.01] cursor-pointer w-[18rem] h-auto aspect-[9/16]">
  <!-- Fashion Magazine Style Card with Hover Expansion -->
  <div class="card-container relative w-full h-full bg-beige/30 my-4 rounded-full transition-all duration-500 ease-out transform perspective-1000 hover:scale-[1.02] hover:shadow-xl">
    
    <!-- Main Visual: Stylist Photo with Magazine-style Overlay -->
    <div class="photo-container relative w-full h-full transition-all duration-300">
      <div class="absolute inset-x-0 bottom-0 z-0 bg-gradient-to-b from-olive to-olive/0 rounded-full h-[60%] overflow-hidden"></div>
        <div class="h-full w-full rounded-full overflow-clip">
          <BlurryBlob client:visible firstBlobColor="bg-olive/80" secondBlobColor="bg-beige" className="rounded-full overflow-hidden" />
        </div>
      <div class="absolute inset-x-0 bottom-0 w-full h-full rounded-full overflow-hidden transition-all duration-300">
        <Image
          src={stylist.profileImagePath}
          alt={`Portrait of ${stylist.name}`}
          width={400}
          height={600}
          format="avif"
          loading="lazy"
          class="main-image absolute inset-x-0 bottom-0 object-cover w-[100%] transition-transform duration-500 ease-out grayscale hover:grayscale-0 hover:scale-105 opacity-95 hover:opacity-100"
        />
      </div>
    </div>
    </div>
      <!-- Magazine-style Headline Elements -->
      <div class="absolute top-6 left-6 z-20 mt-4">
        <div class="flex flex-row items-end gap-4">
          <h3 class="text-3xl md:text-4xl font-bold text-gray-800 tracking-tight leading-none stylist-name">
            {stylist.name}
          </h3>
          {stylist.aka && (
            <p class="text-lg md:text-2xl text-gray-600 font-sans font-light tracking-wide stylist-specialty">
              {stylist.aka}
            </p>
          )}
        </div>
        <div class="mt-1">
          <p class="text-lg md:text-lg lg:text-base text-gray-800 font-light tracking-wide  text-pretty stylist-specialty">
            {stylist.specialty}
          </p>
        </div>
      </div>
      
      <!-- Experience Badge -->
      <div class="absolute top-6 right-6 z-20 aspect-square bg-olive animate-bounce scale-55 px-3 py-1 rounded-full">
        <!-- <p class="text-lg text-gray-800">✨</p> -->
      </div>
      
      <!-- Expandable Content Section -->
      <div class="expandable-content absolute bottom-6 left-0 right-0 p-6 z-20 transform transition-all duration-500 ease-out">
        <!-- Services Tags - Only render this section if featuredServices has items -->
        {Array.isArray(stylist.featuredServices) && stylist.featuredServices.length > 0 && (
          <div class="mb-4 opacity-90 transition-opacity duration-500">
            <ul class="flex flex-wrap gap-2">
              {stylist.featuredServices.map((service) => (
                <li class="service-tag bg-gray-600/20 backdrop-blur-sm text-gray-50 text-xs font-medium px-3 py-1 rounded-full border border-gray-50/20">
                  {service}
                </li>
              ))}
            </ul>
          </div>
        )}
        
        <!-- Content Section (Always Visible) -->
        <div class="content-section max-h-full transition-all duration-500 ease-out overflow-hidden">
          <!-- Social Media Links -->
          <div class="flex flex-row items-center mb-3 mt-4">
            <h4 class="flex text-sm font-medium text-gray-50/80 rounded-full bg-olive/70 backdrop-blur-sm px-3 py-1">社群</h4>
            <div class="flex gap-1 ml-2">
              {Object.entries(stylist.socialMediaLinks).map(([platform, url]) => {
                // Only render if there's a URL
                if (!url) return null;
                
                // Check if we have an icon for this platform (case insensitive)
                const platformLower = platform.toLowerCase();
                const hasIcon = socialIconsData[platformLower]?.path;
                
                return (
                  <a 
                    href={url} 
                    target="_blank" 
                    rel="noopener noreferrer" 
                    class="text-gray-50 hover:text-olive transition-colors duration-300 social-link px-2 py-1"
                    title={capitalize(platform)}
                  >
                    {hasIcon ? (
                      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor" class="w-6 h-6">
                        <path d={socialIconsData[platformLower]?.path} />
                      </svg>
                    ) : (
                      <span class="text-xs">{capitalize(platform)}</span>
                    )}
                  </a>
                );
              })}
            </div>
          </div>
          
          <!-- Availability -->
          <div class="hidden text-sm text-white/70">
            <p><span class="font-medium">Availability:</span> {stylist.availability}</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { animate, inView, stagger, easeInOut, easeOut, easeIn, spring, press, hover } from 'motion';
  //add isMobile check with proper type safety
  let isMobile = false;
  // Check if window is defined (client-side only)
  if (typeof window !== 'undefined') {
    isMobile = window.innerWidth < 768;
  }
  // Animation constants from the guide
  const SPRING_CONFIGS = {
    gentle: { stiffness: 100, damping: 15, mass: 0.5 },
    medium: { stiffness: 150, damping: 15, mass: 1 },
    bouncy: { stiffness: 200, damping: 10, mass: 1 }
  };
  
  const EASING = {
    apple: [0.22, 1, 0.36, 1],
    easeOut: [0.33, 1, 0.68, 1],
    easeInOut: [0.65, 0, 0.35, 1]
  };
  
  // Initialize animations when elements enter the viewport
  inView('.stylist-card', (element) => {
    const target = element as HTMLElement;
    // Initial entrance animation
    animate(target, { opacity: [0, 1], y: [20, 0] }, { 
      duration: 0.7, 
      ease: easeIn,
      delay: stagger(0.1)
    });
    // Handle grayscale animation for the main image
    const mainImage = target.querySelector('.main-image');
    if (mainImage) {
      // If on mobile, apply grayscale effect
      if (isMobile) {
        animate(mainImage, 
          { filter: 'grayscale(0)' }, 
          { duration: 0.3, ease: easeOut });
      }
    }
    // Animate name and specialty with staggered timing
    const nameElement = target.querySelector('.stylist-name');
    if (nameElement) {
      animate(nameElement, 
        { opacity: [0, 1], y: [20, 0] }, 
        { duration: 0.5, ease: easeIn, delay: 0.3 }
      );
    }
    
    const specialtyElement = target.querySelector('.stylist-specialty');
    if (specialtyElement) {
      animate(specialtyElement, 
        { opacity: [0, 1], y: [20, 0] }, 
        { duration: 0.5, ease: easeIn, delay: 0.4 }
      );
    }
    //reset exit view to initial state
    return () => {
      animate(target, { opacity: [1, 0], y: [0, 20] }, { duration: 0.4, ease: easeOut });
    };
  
  }, {amount: 0.6, margin: '300px 0px 0px 0px'});  
</script>

<style>
  /* Additional styles for the magazine layout */
  .stylist-card {
  }
  
    .card-container {

  }
  
  .photo-container {
  }
  
  /* Ensure smooth transitions for hover effects */
  .expandable-content {

  }
  
  /* Enhance hover effect with subtle lift */
  .stylist-card:hover .card-container {
  }
</style>