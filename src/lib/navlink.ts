/**
 * Navigation link interface representing a single menu item.
 */
export interface NavLink {
  /**
   * The display text for the navigation link.
   * Example: "Home", "Services", "Blog"
   */
  text: string;

  /**
   * The URL path this link points to.
   * Example: "/", "/services", "/blog"
   */
  href: string;

  /**
   * Whether this link is currently active.
   * This will typically be calculated dynamically based on the current route.
   */
  isActive: boolean;

  /**
   * Optional order index for sorting links in the navigation.
   * Lower numbers appear first.
   */
  order?: number;

  /**
   * Controls link visibility on different devices.
   * 'all' (default) shows everywhere, 'desktop' hides on mobile, 'mobile' hides on desktop.
   */
  visibility?: 'all' | 'desktop' | 'mobile';
}

/**
 * Convert a URL path string into a human-readable, title-cased label.
 * For example, "/services" -> "Services", "/about-us" -> "About Us", "/" -> "Home".
 * @param path The URL path string.
 * @returns The converted display text.
 */
export function pathToText(path: string): string {
  if (path === '/' || path.trim() === '') {
    return 'Home';
  }

  // Remove leading/trailing slashes, split by slash
  const parts = path.replace(/^\/|\/$/g, '').split('/');

  // Convert each segment to Title Case
  const titled = parts.map(segment =>
    segment
      .split('-')
      .map(word => word.charAt(0).toUpperCase() + word.slice(1))
      .join(' ')
  );

  return titled.join(' / ');
}

/**
 * Generate navigation links by scanning the pages directory and reading navlinkData.
 *
 * This function reads all pages in the src/pages directory and creates NavLink objects
 * based on their paths and navlinkData properties.
 *
 * navlinkData properties used:
 * - navTitle: Custom display text for the navigation link
 * - navOrder: Custom order for the navigation link
 * - navVisibility: Visibility setting ('all', 'desktop', 'mobile', or 'hidden')
 *
 * @returns An array of NavLink objects representing site pages.
 */
export async function getAutoGeneratedLinks(): Promise<NavLink[]> {
  // Use Astro's glob import to find all pages
  const pageModules = import.meta.glob('/src/pages/**/*.astro', { eager: true });
  const links: NavLink[] = [];

  // Process each page module
  for (const [path, module] of Object.entries(pageModules)) {
    // Skip dynamic routes like [slug].astro
    if (path.includes('[') && path.includes(']')) continue;

    // Skip non-page files
    if (path.includes('/_') || path.includes('/components/')) continue;

    // Convert file path to URL path
    let href = path
      .replace('/src/pages', '') // Remove the src/pages prefix
      .replace(/\.astro$/, '') // Remove the .astro extension
      .replace(/\/index$/, '/'); // Replace /index with /

    // Ensure the path starts with a slash
    if (!href.startsWith('/')) href = '/' + href;

    // Get navigation data from the page
    const navlinkData = (module as any).navlinkData || {};

    // Skip pages that are explicitly hidden in navlinkData
    if (navlinkData.navVisibility === 'hidden') continue;

    // Create the NavLink object
    const link: NavLink = {
      text: navlinkData.navTitle || pathToText(href),
      href,
      isActive: false,
      order: navlinkData.navOrder !== undefined ? navlinkData.navOrder : undefined,
      visibility: navlinkData.navVisibility || 'all'
    };

    links.push(link);
  }

  return links;
}
/**
 * Interface representing a manual override for navigation links.
 * Allows adding, modifying, or removing links.
 */
export interface NavOverride {
  /**
   * The href of the link to override, or the href of a new link to add.
   */
  href: string;

  /**
   * The override action type.
   * 'add' to insert a new link, 'modify' to update an existing link, 'remove' to hide/delete a link.
   */
  action: 'add' | 'modify' | 'remove';

  /**
   * Data to apply for 'add' or 'modify' actions.
   * For 'add', 'text' is required. For 'modify', any provided fields will overwrite existing ones.
   */
  linkData?: Partial<Omit<NavLink, 'href' | 'isActive'>>;
}

/**
 * Manual navigation overrides to customize the menu.
 * Examples:
 * - Modify text of a link
 * - Add external links
 * - Remove links
 * - Change order of links
 * - Change href of a link
 * - Change visibility of a link to 'desktop' or 'mobile' only
 */
export const manualNavOverrides: NavOverride[] = [
  // Add your manual overrides here as needed
  // Example:
  // {
  //   href: '/blog',
  //   action: 'modify',
  //   linkData: { text: 'Our Blog' }
  // }
];

/**
 * Apply manual overrides to a list of auto-generated navigation links.
 * Supports adding new links, modifying existing ones, and removing links.
 *
 * @param autoLinks The array of automatically generated NavLink objects.
 * @param overrides The array of NavOverride instructions.
 * @returns A new array of NavLink objects with overrides applied.
 */
export function applyNavOverrides(
  autoLinks: NavLink[],
  overrides: NavOverride[]
): NavLink[] {
  const linksToRemove = new Set<string>();
  const linksToAdd: NavLink[] = [];

  // Clone autoLinks to avoid mutating input
  const modifiedLinks = autoLinks.map(link => ({ ...link }));

  for (const override of overrides) {
    if (override.action === 'remove') {
      linksToRemove.add(override.href);
    } else if (override.action === 'modify') {
      const target = modifiedLinks.find(l => l.href === override.href);
      if (target && override.linkData) {
        Object.assign(target, override.linkData);
      }
    } else if (override.action === 'add') {
      if (override.linkData && override.linkData.text) {
        linksToAdd.push({
          text: override.linkData.text,
          href: override.href,
          isActive: false,
          order: override.linkData.order,
          visibility: override.linkData.visibility
        });
      }
    }
  }

  const finalLinks = modifiedLinks.filter(link => !linksToRemove.has(link.href));
  finalLinks.push(...linksToAdd);

  return finalLinks;
}

// Navigation links are now generated asynchronously in the nav.astro component
/**
 * Generate the final navigation links with overrides, active state, and sorting.
 *
 * This function combines auto-generated links with manual overrides,
 * determines which link is active based on the current page URL,
 * and sorts the links by order and text.
 *
 * @param currentPageHref The current page URL path (e.g., "/services").
 * @returns Promise that resolves to a sorted array of NavLink objects with active state.
 */
export async function getNavLinks(currentPageHref: string): Promise<NavLink[]> {
  const autoLinks = await getAutoGeneratedLinks();
  const mergedLinks = applyNavOverrides(autoLinks, manualNavOverrides);

  // Calculate active state
  for (const link of mergedLinks) {
    // Exact match or root special case
    if (link.href === '/') {
      link.isActive = currentPageHref === '/';
    } else {
      link.isActive = currentPageHref.startsWith(link.href) && link.href !== '/';
    }
  }

  // Sort by order ascending, then alphabetically by text
  mergedLinks.sort((a, b) => {
    const orderA = a.order ?? Number.MAX_SAFE_INTEGER;
    const orderB = b.order ?? Number.MAX_SAFE_INTEGER;
    if (orderA !== orderB) {
      return orderA - orderB;
    }
    return a.text.localeCompare(b.text);
  });

  return mergedLinks;
}

// Remove the static export since we're now using async functions
// The navLinks will be generated in the nav.astro component
