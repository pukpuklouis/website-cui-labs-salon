---
// src/pages/blog/[slug].astro
import { getCollection, type CollectionEntry } from 'astro:content';
import Layout from '../../layouts/Layout.astro';
import { Image } from 'astro:assets'; // Import Astro Image component

// 1. Generate a static page for every blog post
export async function getStaticPaths() {
  const postEntries = await getCollection('blog');
  return postEntries.map(entry => ({
    params: { slug: entry.slug }, props: { entry },
  }));
}

// 2. Get the post directly from props
interface Props {
  entry: CollectionEntry<'blog'>;
}
const { entry } = Astro.props;
const { Content } = await entry.render(); // Get the rendered content component
---

<Layout title={entry.data.title} description={entry.data.description}>
  <article class="prose dark:prose-invert max-w-none"> {/* Apply Tailwind prose for styling */}
    {/* Optional: Display featured image */}
    {/* Optional: Display featured image */}
    {/* Optional: Display featured image - Standard conditional rendering */}
    {entry.data.image && entry.data.image.url && (
      <Image
        src={entry.data.image.url}
        alt={entry.data.image.alt ? entry.data.image.alt : "Blog post image"}
        width={800}
        height={400}
        format="webp"
        class="mb-6 rounded-lg shadow-md w-full h-auto"
      />
    )}

    {/* Post Header */}
    <header class="mb-8">
      <h1 class="text-4xl font-bold mb-2">{entry.data.title}</h1>
      <div class="text-gray-600 dark:text-gray-400 text-sm">
        <span>Published on {entry.data.pubDate.toLocaleDateString('en-US', { year: 'numeric', month: 'long', day: 'numeric' })}</span>
        {entry.data.author && <span> by {entry.data.author}</span>}
      </div>
    </header>

    {/* Post Content */}
    <Content />

    {/* Optional: Display tags/categories */}
    <footer class="mt-8 pt-4 border-t border-gray-200 dark:border-gray-700">
      {entry.data.tags && entry.data.tags.length > 0 && (
        <div class="mb-2">
          <strong>Tags:</strong> 
          {entry.data.tags.map(tag => (
            <span class="inline-block bg-gray-200 dark:bg-gray-700 rounded-full px-3 py-1 text-sm font-semibold text-gray-700 dark:text-gray-300 mr-2 mb-2">{tag}</span>
          ))}
        </div>
      )}
       {entry.data.categories && entry.data.categories.length > 0 && (
        <div>
          <strong>Categories:</strong> 
          {entry.data.categories.map(category => (
             <span class="inline-block bg-blue-100 dark:bg-blue-900 rounded-full px-3 py-1 text-sm font-semibold text-blue-800 dark:text-blue-200 mr-2 mb-2">{category}</span>
          ))}
        </div>
      )}
    </footer>
  </article>
</Layout>